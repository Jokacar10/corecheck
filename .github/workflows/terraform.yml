name: 'Terraform'

on:
  push:
    branches: [ "master", "dev", "infra-lambda-build-terraform"]
    paths:
      - 'functions/**'
      - 'deploy/**'
      - 'internal/**'
      - .github/workflows/terraform.yml
  workflow_dispatch:
  repository_dispatch:
    types:
      - webhook

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production
    env:
      TF_VAR_aws_access_key_id: ${{ secrets.TF_VAR_aws_access_key_id }}
      TF_VAR_aws_secret_access_key: ${{ secrets.TF_VAR_aws_secret_access_key }}
      TF_VAR_sonar_token: ${{ secrets.SONAR_TOKEN }}
      TF_VAR_github_token: ${{ secrets.GH_ACCESS_TOKEN }}
      TF_VAR_datadog_api_key: ${{ secrets.DATADOG_API_KEY }}
      TF_VAR_db_user: ${{ secrets.DB_USER }}
      TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
      TF_VAR_dns_name: ${{ secrets.DNS_NAME }}
      TF_VAR_ssh_pubkey: ${{ secrets.SSH_PUBKEY }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./deploy/terraform

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519

    - name: Aws configure
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set default.region eu-west-3

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      # TODO: resolve backend config
      run: terraform init -backend-config="bucket=bitcoin-coverage-state-corecheck"

    - name: Change workspace for dev
      # TODO: resolve workspace
      run: if [ "${{ github.ref }}" == "refs/heads/dev" ]; then terraform workspace select dev; else terraform workspace select corecheck; fi

    - name: Terraform Apply
      run: terraform apply -auto-approve -input=false -var "ssh_private_key_file=~/.ssh/id_ed25519"
